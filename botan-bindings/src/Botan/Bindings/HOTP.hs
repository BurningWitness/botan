{-|
Module      : Botan.Bindings.HOTP
Description : Hash-based one-time passwords
Copyright   : (c) Leo D, 2023
License     : BSD-3-Clause
Maintainer  : leo@apotheca.io
Stability   : experimental
Portability : POSIX

One time password schemes are a user authentication method that
relies on a fixed secret key which is used to derive a sequence
of short passwords, each of which is accepted only once. Commonly
this is used to implement two-factor authentication (2FA), where
the user authenticates using both a conventional password (or a
public key signature) and an OTP generated by a small device such
as a mobile phone.

Botan implements the HOTP and TOTP schemes from RFC 4226 and 6238.

Since the range of possible OTPs is quite small, applications must
rate limit OTP authentication attempts to some small number per 
second. Otherwise an attacker could quickly try all 1000000 6-digit
OTPs in a brief amount of time.

HOTP generates OTPs that are a short numeric sequence, between 6
and 8 digits (most applications use 6 digits), created using the
HMAC of a 64-bit counter value. If the counter ever repeats the
OTP will also repeat, thus both parties must assure the counter
only increments and is never repeated or decremented. Thus both
client and server must keep track of the next counter expected.

Anyone with access to the client-specific secret key can authenticate
as that client, so it should be treated with the same security
consideration as would be given to any other symmetric key or
plaintext password.
-}

module Botan.Bindings.HOTP where

import Botan.Bindings.Error
import Botan.Bindings.Prelude

-- NOTE: RFC 4226

{-|
Opaque HOTP object

@typedef struct botan_hotp_struct* botan_hotp_t;@
-}

data HOTPStruct
type HOTPPtr = Ptr HOTPStruct

type HOTPCode = Word32
type HOTPCounter = Word64

{-|
Initialize a HOTP instance

@BOTAN_PUBLIC_API(2,8)
int botan_hotp_init(botan_hotp_t* hotp,
                    const uint8_t key[], size_t key_len,
                    const char* hash_algo,
                    size_t digits);@
-}
foreign import ccall unsafe botan_hotp_init
    :: Ptr HOTPPtr
    -> Ptr Word8 -> CSize
    -> CString
    -> CSize
    -> IO BotanErrorCode

{-|
Destroy a HOTP instance

- \@return 0 if success, error if invalid object handle

@BOTAN_PUBLIC_API(2,8)
int botan_hotp_destroy(botan_hotp_t hotp);@
-}
foreign import ccall unsafe "&botan_hotp_destroy" botan_hotp_destroy :: FinalizerPtr HOTPStruct

{-|
Generate a HOTP code for the provided counter

@BOTAN_PUBLIC_API(2,8)
int botan_hotp_generate(botan_hotp_t hotp,
                        uint32_t* hotp_code,
                        uint64_t hotp_counter);@
-}
foreign import ccall unsafe botan_hotp_generate
    :: HOTPPtr
    -> Ptr HOTPCode
    -> HOTPCounter
    -> IO BotanErrorCode

{-|
Verify a HOTP code

@BOTAN_PUBLIC_API(2,8)
int botan_hotp_check(botan_hotp_t hotp,
                     uint64_t* next_hotp_counter,
                     uint32_t hotp_code,
                     uint64_t hotp_counter,
                     size_t resync_range);@
-}
foreign import ccall unsafe botan_hotp_check
    :: HOTPPtr
    -> Ptr HOTPCounter
    -> HOTPCode
    -> HOTPCounter
    -> CSize
    -> IO BotanErrorCode
