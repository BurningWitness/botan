{-|
Module      : Botan.Low.HOTP
Description : Hash-based one-time passwords
Copyright   : (c) Leo D, 2023
License     : BSD-3-Clause
Maintainer  : leo@apotheca.io
Stability   : experimental
Portability : POSIX

One time password schemes are a user authentication method that
relies on a fixed secret key which is used to derive a sequence
of short passwords, each of which is accepted only once. Commonly
this is used to implement two-factor authentication (2FA), where
the user authenticates using both a conventional password (or a
public key signature) and an OTP generated by a small device such
as a mobile phone.

Botan implements the HOTP and TOTP schemes from RFC 4226 and 6238.

Since the range of possible OTPs is quite small, applications must
rate limit OTP authentication attempts to some small number per 
second. Otherwise an attacker could quickly try all 1000000 6-digit
OTPs in a brief amount of time.

HOTP generates OTPs that are a short numeric sequence, between 6
and 8 digits (most applications use 6 digits), created using the
HMAC of a 64-bit counter value. If the counter ever repeats the
OTP will also repeat, thus both parties must assure the counter
only increments and is never repeated or decremented. Thus both
client and server must keep track of the next counter expected.

Anyone with access to the client-specific secret key can authenticate
as that client, so it should be treated with the same security
consideration as would be given to any other symmetric key or
plaintext password.
-}

module Botan.Low.HOTP where

import qualified Data.ByteString as ByteString

import Botan.Bindings.HOTP

import Botan.Low.Error
import Botan.Low.Make
import Botan.Low.Prelude

-- NOTE: RFC 4226

-- /**
-- * HOTP
-- */

newtype HOTP = MkHOTP { getHOTPForeignPtr :: ForeignPtr HOTPStruct }

withHOTPPtr :: HOTP -> (HOTPPtr -> IO a) -> IO a
withHOTPPtr = withForeignPtr . getHOTPForeignPtr

-- NOTE: Digits should be 6-8
hotpInit :: ByteString -> ByteString -> Int -> IO HOTP
hotpInit key algo digits = alloca $ \ outPtr -> do
    asBytesLen key $ \ keyPtr keyLen -> do
        asCString algo $ \ algoPtr -> do
            throwBotanIfNegative $ botan_hotp_init outPtr keyPtr keyLen algoPtr (fromIntegral digits)
            out <- peek outPtr
            foreignPtr <- newForeignPtr botan_hotp_destroy out
            return $ MkHOTP foreignPtr

hotpDestroy :: HOTP -> IO ()
hotpDestroy hotp = finalizeForeignPtr (getHOTPForeignPtr hotp)

withHOTP :: ByteString -> ByteString -> Int -> (HOTP -> IO a) -> IO a
withHOTP = mkWithTemp3 hotpInit hotpDestroy

-- NOTE: User is responsible for incrementing counter at this level
hotpGenerate :: HOTP -> HOTPCounter -> IO HOTPCode
hotpGenerate hotp counter = withHOTPPtr hotp $ \ hotpPtr -> do
    alloca $ \ outPtr -> do
        throwBotanIfNegative $ botan_hotp_generate hotpPtr outPtr counter
        peek outPtr

-- ~~TODO: Should probably return bool - see other similar cases~~
--  Struck:
--      "Returns a pair of (is_valid,next_counter_to_use). If the OTP is
--      invalid then always returns (false,starting_counter), since the
--      last successful authentication counter has not changed. ""
-- NOTE: "Depending on the environment a resync_range of 3 to 10 might be appropriate."
hotpCheck :: HOTP -> HOTPCode -> HOTPCounter -> Int -> IO (Bool, HOTPCounter)
hotpCheck hotp code counter resync = withHOTPPtr hotp $ \ hotpPtr -> do
    alloca $ \ outPtr -> do
        valid <- throwBotanCatchingSuccess $ botan_hotp_check hotpPtr outPtr code counter (fromIntegral resync)
        nextCounter <- peek outPtr
        return (valid, nextCounter)
